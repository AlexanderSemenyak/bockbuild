From 1ddc00187ff1fd943ad10e53311d345e7bae0833 Mon Sep 17 00:00:00 2001
From: Carlos Garnacho <carlosg@gnome.org>
Date: Tue, 21 May 2013 18:43:55 +0200
Subject: [PATCH 1/2] Add stronger checks on the scale matching

This fixes icon lookups and ensures fallback scales are rendered
at the expected size.
---
 gdk/gdkcairo.c       |  7 ++++---
 gtk/gtkentry.c       | 26 ++++++++++++++------------
 gtk/gtkiconfactory.c |  8 +++++---
 gtk/gtkicontheme.c   |  6 +++---
 gtk/gtkimage.c       | 11 +++++++----
 5 files changed, 33 insertions(+), 25 deletions(-)

diff --git a/gdk/gdkcairo.c b/gdk/gdkcairo.c
index b1c1d7e..9aab5e1 100644
--- a/gdk/gdkcairo.c
+++ b/gdk/gdkcairo.c
@@ -219,10 +219,11 @@ gdk_cairo_set_source_pixbuf (cairo_t         *cr,
 
       scaled_pixbuf = g_object_get_data (G_OBJECT (pixbuf),
                                          "gdk-pixbuf-2x-variant");
-      scale = 2;
-
       if (scaled_pixbuf)
-        pixbuf = scaled_pixbuf;
+        {
+          scale = 2;
+          pixbuf = scaled_pixbuf;
+        }
     }
 
   width = gdk_pixbuf_get_width (pixbuf);
diff --git a/gtk/gtkentry.c b/gtk/gtkentry.c
index f182710..6454d4b 100644
--- a/gtk/gtkentry.c
+++ b/gtk/gtkentry.c
@@ -2210,15 +2210,15 @@ gtk_entry_get_property (GObject         *object,
       break;
 
     case PROP_ICON_SET_PRIMARY:
-      g_value_set_object (value,
-                          gtk_entry_get_icon_set (entry,
-                                                  GTK_ENTRY_ICON_PRIMARY));
+      g_value_set_boxed (value,
+                         gtk_entry_get_icon_set (entry,
+                                                 GTK_ENTRY_ICON_PRIMARY));
       break;
 
     case PROP_ICON_SET_SECONDARY:
-      g_value_set_object (value,
-                          gtk_entry_get_icon_set (entry,
-                                                  GTK_ENTRY_ICON_SECONDARY));
+      g_value_set_boxed (value,
+                         gtk_entry_get_icon_set (entry,
+                                                 GTK_ENTRY_ICON_SECONDARY));
       break;
 
     case PROP_STORAGE_TYPE_PRIMARY:
@@ -3253,6 +3253,7 @@ draw_icon (GtkWidget            *widget,
   EntryIconInfo *icon_info = priv->icons[icon_pos];
   GdkPixbuf *pixbuf;
   gint x, y, width, height;
+  gdouble window_scale;
   cairo_t *cr;
 
   if (!icon_info)
@@ -3263,8 +3264,9 @@ draw_icon (GtkWidget            *widget,
   if (icon_info->pixbuf == NULL)
     return;
 
-  width = gdk_window_get_width (icon_info->window);
-  height = gdk_window_get_height (icon_info->window);
+  window_scale = gdk_window_get_scale_factor (widget->window);
+  width = gdk_window_get_width (icon_info->window) / window_scale;
+  height = gdk_window_get_height (icon_info->window) / window_scale;
 
   /* size_allocate hasn't been called yet. These are the default values.
    */
@@ -3274,20 +3276,20 @@ draw_icon (GtkWidget            *widget,
   pixbuf = icon_info->pixbuf;
   g_object_ref (pixbuf);
 
-  if (gdk_pixbuf_get_height (pixbuf) > height)
+  if (gdk_pixbuf_get_height (pixbuf) > (height * window_scale))
     {
       GdkPixbuf *temp_pixbuf;
       gint scale;
 
-      scale = height - 2 * priv->icon_margin;
+      scale = (height - 2 * priv->icon_margin) * window_scale;
       temp_pixbuf = gdk_pixbuf_scale_simple (pixbuf, scale, scale,
                                              GDK_INTERP_BILINEAR);
       g_object_unref (pixbuf);
       pixbuf = temp_pixbuf;
     }
 
-  x = (width  - gdk_pixbuf_get_width (pixbuf)) / 2;
-  y = (height - gdk_pixbuf_get_height (pixbuf)) / 2;
+  x = (width  - (gdk_pixbuf_get_width (pixbuf) / window_scale)) / 2;
+  y = (height - (gdk_pixbuf_get_height (pixbuf) / window_scale)) / 2;
 
   if (!gtk_widget_is_sensitive (widget) ||
       icon_info->insensitive)
diff --git a/gtk/gtkiconfactory.c b/gtk/gtkiconfactory.c
index 48b6e80..ab9a212 100644
--- a/gtk/gtkiconfactory.c
+++ b/gtk/gtkiconfactory.c
@@ -1650,7 +1650,7 @@ _get_real_scale (GtkWidget   *widget,
   settings = gtk_settings_get_for_screen (screen);
   gtk_icon_size_lookup_for_settings (settings, size, &icon_width, NULL);
 
-  return (gdouble) gdk_pixbuf_get_width (icon) / icon_width;
+  return round ((gdouble) gdk_pixbuf_get_width (icon) / icon_width);
 }
 
 GdkPixbuf*
@@ -1690,11 +1690,11 @@ gtk_icon_set_render_icon_internal (GtkIconSet        *icon_set,
   if (icon == NULL)
     icon = render_fallback_image (style, direction, state, size, widget, detail);
 
+  *scale = _get_real_scale (widget, style, size, icon);
+
   if (detail == NULL)
     add_to_cache (icon_set, style, direction, state, size, *scale, icon);
 
-  *scale = _get_real_scale (widget, style, size, icon);
-
   return icon;
 }
 
@@ -1966,10 +1966,12 @@ gtk_icon_source_new (void)
   src->direction = GTK_TEXT_DIR_NONE;
   src->size = GTK_ICON_SIZE_INVALID;
   src->state = GTK_STATE_NORMAL;
+  src->scale = 1;
 
   src->any_direction = TRUE;
   src->any_state = TRUE;
   src->any_size = TRUE;
+  src->any_scale = TRUE;
 
   return src;
 }
diff --git a/gtk/gtkicontheme.c b/gtk/gtkicontheme.c
index 7672cc2..500f0ab 100644
--- a/gtk/gtkicontheme.c
+++ b/gtk/gtkicontheme.c
@@ -2231,7 +2231,7 @@ theme_lookup_icon (IconTheme          *theme,
                    */             
                   difference = abs (size - dir->size);
                   if (!match ||
-                      (scale_diff < min_scale_diff && difference < min_difference))
+                      (scale_diff <= min_scale_diff && difference < min_difference))
                     {
                       match = TRUE;
                       min_difference = difference;
@@ -2247,7 +2247,7 @@ theme_lookup_icon (IconTheme          *theme,
             {
 	      if (!has_larger)
 	        {
-	          if ((scale_diff <= min_scale_diff && difference < min_difference) || smaller)
+	          if ((scale_diff <= min_scale_diff && difference < min_difference) || (scale_diff == 0 && smaller))
 	  	    {
 		      min_difference = difference;
                       min_scale_diff = scale_diff;
@@ -2257,7 +2257,7 @@ theme_lookup_icon (IconTheme          *theme,
 	        }
 	      else
 	        {
-	          if ((scale_diff <= min_scale_diff && difference < min_difference) && smaller)
+	          if ((scale_diff <= min_scale_diff && difference < min_difference) && (scale_diff == 0 && smaller))
 		    {
 		      min_difference = difference;
                       min_scale_diff = scale_diff;
diff --git a/gtk/gtkimage.c b/gtk/gtkimage.c
index 051bdae..3d703cb 100644
--- a/gtk/gtkimage.c
+++ b/gtk/gtkimage.c
@@ -1717,9 +1717,11 @@ ensure_pixbuf_for_icon_name (GtkImage *image)
 	    }
 	}
       image->data.name.pixbuf =
-	gtk_icon_theme_load_icon (icon_theme,
-				  image->data.name.icon_name,
-				  MIN (width, height), flags, &error);
+	gtk_icon_theme_load_icon_for_scale (icon_theme,
+                                            image->data.name.icon_name,
+                                            MIN (width, height),
+                                            gdk_widget_get_scale_factor (GTK_WIDGET (image)),
+                                            flags, &error);
       if (image->data.name.pixbuf == NULL)
 	{
 	  g_error_free (error);
@@ -1854,7 +1856,6 @@ gtk_image_expose (GtkWidget      *widget,
       image = GTK_IMAGE (widget);
       misc = GTK_MISC (widget);
       priv = GTK_IMAGE_GET_PRIVATE (image);
-      render_scale = gtk_widget_get_scale_factor (widget);
       area = event->area;
 
       /* For stock items and icon sets, we lazily calculate
@@ -1956,6 +1957,7 @@ gtk_image_expose (GtkWidget      *widget,
           break;
 
         case GTK_IMAGE_STOCK:
+          render_scale = gtk_widget_get_scale_factor (widget);
           pixbuf = gtk_widget_render_icon_scaled (widget,
                                                   image->data.stock.stock_id,
                                                   image->icon_size,
@@ -1971,6 +1973,7 @@ gtk_image_expose (GtkWidget      *widget,
           break;
 
         case GTK_IMAGE_ICON_SET:
+          render_scale = gtk_widget_get_scale_factor (widget);
           pixbuf =
             gtk_icon_set_render_icon_scaled (image->data.icon_set.icon_set,
                                              widget->style,
-- 
1.8.3.rc1

