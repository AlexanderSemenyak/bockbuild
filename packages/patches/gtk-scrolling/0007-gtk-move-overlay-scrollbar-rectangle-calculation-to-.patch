From f0b3aa4cccc2e115a88df3178c14635b7774f3f4 Mon Sep 17 00:00:00 2001
From: Michael Natterer <mitch@gimp.org>
Date: Thu, 14 Jun 2012 11:25:58 +0200
Subject: [PATCH 07/10] gtk: move overlay scrollbar rectangle calculation to
 an own function

---
 gtk/gtkscrolledwindow.c |  109 ++++++++++++++++++++++++++++++----------------
 1 files changed, 71 insertions(+), 38 deletions(-)

diff --git a/gtk/gtkscrolledwindow.c b/gtk/gtkscrolledwindow.c
index 39584c5..a1e1893 100644
--- a/gtk/gtkscrolledwindow.c
+++ b/gtk/gtkscrolledwindow.c
@@ -3058,10 +3058,12 @@ gtk_scrolled_window_rounded_rectangle (cairo_t *cr,
   cairo_close_path (cr);
 }
 
-static gboolean
-gtk_scrolled_window_child_expose (GtkWidget         *widget,
-                                  GdkEventExpose    *eevent,
-                                  GtkScrolledWindow *scrolled_window)
+static void
+gtk_scrolled_window_get_child_scroll_areas (GtkScrolledWindow *scrolled_window,
+                                            GtkWidget         *child,
+                                            GdkWindow         *child_window,
+                                            GdkRectangle      *vslider_rect,
+                                            GdkRectangle      *hslider_rect)
 {
    GtkScrolledWindowPrivate *priv = GTK_SCROLLED_WINDOW_GET_PRIVATE (scrolled_window);
    GtkAdjustment *adj;
@@ -3080,16 +3082,11 @@ gtk_scrolled_window_child_expose (GtkWidget         *widget,
    gint window_height;
    gint viewport_width;
    gint viewport_height;
-   cairo_t   *cr;
 
-   cr = gdk_cairo_create (eevent->window);
-   gdk_cairo_region (cr, eevent->region);
-   cairo_clip (cr);
+   window_width = gdk_window_get_width (child_window);
+   window_height = gdk_window_get_height (child_window);
 
-   window_width = gdk_window_get_width (eevent->window);
-   window_height = gdk_window_get_height (eevent->window);
-
-   gtk_widget_get_allocation (widget, &allocation);
+   gtk_widget_get_allocation (child, &allocation);
 
    viewport_width = MIN (window_width, allocation.width);
    viewport_height = MIN (window_height, allocation.height);
@@ -3108,10 +3105,7 @@ gtk_scrolled_window_child_expose (GtkWidget         *widget,
        value_h = gtk_adjustment_get_value (adj);
      }
 
-   /*
-    * Vertical scrolling.
-    */
-   if (scrolled_window->vscrollbar)
+   if (vslider_rect && scrolled_window->vscrollbar)
      {
        adj = gtk_range_get_adjustment (GTK_RANGE (scrolled_window->vscrollbar));
 
@@ -3138,19 +3132,21 @@ gtk_scrolled_window_child_expose (GtkWidget         *widget,
            if (window_height > allocation.height)
              y += value_v;
 
-           gtk_scrolled_window_rounded_rectangle (cr,
-                                                  x, y,
-                                                  priv->sb_width,
-                                                  height,
-                                                  priv->sb_radius,
-                                                  priv->sb_radius);
+           vslider_rect->x = x;
+           vslider_rect->y = y;
+           vslider_rect->width = priv->sb_width;
+           vslider_rect->height = height;
+         }
+       else
+         {
+           vslider_rect->x = 0;
+           vslider_rect->y = 0;
+           vslider_rect->width = 0;
+           vslider_rect->height = 0;
          }
      }
 
-   /*
-    * Horizontal scrolling.
-    */
-   if (scrolled_window->hscrollbar)
+   if (hslider_rect && scrolled_window->hscrollbar)
      {
        adj = gtk_range_get_adjustment (GTK_RANGE (scrolled_window->hscrollbar));
 
@@ -3177,22 +3173,61 @@ gtk_scrolled_window_child_expose (GtkWidget         *widget,
            if (window_height > allocation.height)
              y += value_v;
 
-           gtk_scrolled_window_rounded_rectangle (cr,
-                                                  x, y,
-                                                  width,
-                                                  priv->sb_width,
-                                                  priv->sb_radius,
-                                                  priv->sb_radius);
+           hslider_rect->x = x;
+           hslider_rect->y = y;
+           hslider_rect->width = width;
+           hslider_rect->height = priv->sb_width;
+         }
+       else
+         {
+           hslider_rect->x = 0;
+           hslider_rect->y = 0;
+           hslider_rect->width = 0;
+           hslider_rect->height = 0;
          }
      }
+}
+
+static gboolean
+gtk_scrolled_window_child_expose (GtkWidget         *widget,
+                                  GdkEventExpose    *eevent,
+                                  GtkScrolledWindow *scrolled_window)
+{
+   GtkScrolledWindowPrivate *priv = GTK_SCROLLED_WINDOW_GET_PRIVATE (scrolled_window);
+   GdkRectangle vslider_rect;
+   GdkRectangle hslider_rect;
+   cairo_t   *cr;
+
+   cr = gdk_cairo_create (eevent->window);
+   gdk_cairo_region (cr, eevent->region);
+   cairo_clip (cr);
+
+   gtk_scrolled_window_get_child_scroll_areas (scrolled_window,
+                                               gtk_bin_get_child (GTK_BIN (scrolled_window)),
+                                               eevent->window,
+                                               &vslider_rect, &hslider_rect);
+
+   if (scrolled_window->vscrollbar && vslider_rect.width > 0)
+     gtk_scrolled_window_rounded_rectangle (cr,
+                                            vslider_rect.x,
+                                            vslider_rect.y,
+                                            vslider_rect.width,
+                                            vslider_rect.height,
+                                            priv->sb_radius,
+                                            priv->sb_radius);
+
+   if (scrolled_window->hscrollbar && hslider_rect.width > 0)
+     gtk_scrolled_window_rounded_rectangle (cr,
+                                            hslider_rect.x,
+                                            hslider_rect.y,
+                                            hslider_rect.width,
+                                            hslider_rect.height,
+                                            priv->sb_radius,
+                                            priv->sb_radius);
 
-   /*
-    * Paint.
-    */
    cairo_set_source_rgba (cr, 0, 0, 0,
                           gtk_adjustment_get_value (priv->opacity));
    cairo_fill (cr);
-
    cairo_destroy (cr);
 
    return FALSE;
@@ -3224,8 +3259,6 @@ gtk_scrolled_window_cancel_animation (GtkScrolledWindow *scrolled_window)
 static gboolean
 gtk_scrolled_window_fade_out_timeout (GtkScrolledWindow *scrolled_window)
 {
-  GtkScrolledWindowPrivate *priv = GTK_SCROLLED_WINDOW_GET_PRIVATE (scrolled_window);
-
   gtk_scrolled_window_start_fade_out_animation (scrolled_window);
 
   return FALSE;
-- 
1.7.5.4

